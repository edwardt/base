/**
 * @file epl_parser_driver.h
 * @brief Driver class for the EPL parser and the EPL scanner. Based
 *        on the example in Chapter 10 of the Bison manual.
 *
 * @author cjeong
 */
#ifndef MV_EPL_PARSER_DRIVER_H
#define MV_EPL_PARSER_DRIVER_H

#include <list>
#include "mv/epl.h"
#include "mv/epl/epl_module.h"
#include "epl_parse.hpp"    /* generated by bison */

namespace mv { namespace epl {

/* Declaration of scanning function. Flex expects the signature of yylex 
   in the YY_DECL, and the C++ parser expects it to be declared. 
   We can factor both as follows ... */
#define YY_DECL                                       \
  extern "C" mv::epl::yy::Parser::token_type          \
  yylex(mv::epl::yy::Parser::semantic_type *yylval,   \
        mv::epl::yy::Parser::location_type *yylloc,   \
        mv::epl::ParserDriver& driver)

/* ... and declare it for the parser's sake. */
YY_DECL;

/**
 * @class ParserDriver
 *
 * @brief Responsible for conducting the scanning and parsing of EPL code.
 * This object will be used by two major objects: EPL Parser (generated by
 * bison) and EplServerImpl.
 *
 *    Parser <---<eplcode>--- ParserDriver <---<epl code>--- EplServerImpl
 *      |
 *      +------<Stm list>---> ParserDriver ---<Stm list>---> EplServerImpl
 *
 * @TODO Make multiple parser threads and dispatch parsing jobs concurrently.
 */
class ParserDriver {
public:
  ParserDriver();
  virtual ~ParserDriver();
  
  /* Functions for parsing. Pass either filename or the string itself
     to be parsed in str.
  
     TODO: Return ParseResult object, which consists of result code and
     Stm object, or else. */
  Module *parse(SourceTag source, const std::string& str);
  std::string& getFile() { return _file; }

  Module *getModule() { return _module; }

  /* Error handling. */
  void error(const yy::location& l, const std::string& m);
  void error(const std::string& m);

private:
  SourceTag _source;
  std::string _file;
  Module *_module;

  int _result;

  bool _traceScanner;
  bool _traceParser;
};

}} /* mv::epl */

#endif /* MV_EPL_PARSE_DRIVER_H */
